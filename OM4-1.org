# # -*- mode: org -*-
# # -*- coding: utf-8 -*-
# Place title here
#+TITLE:
# Place author here
#+AUTHOR:
# Place email here
#+EMAIL: 
# Call borgauf/insert-dateutc.1 here
#+DATE: 
# #+Filetags: :SAGA
# #+TAGS: experiment_nata(e) idea_nata(i) chem_nata(c) logs_nata(l) y_stem(y)
#+LANGUAGE:  en
# #+INFOJS_OPT: view:showall ltoc:t mouse:underline path:http://orgmode.org/org-info.js
# #+HTML_HEAD: <link rel="stylesheet" href="../data/stylesheet.css" type="text/css">
#+HTML_HEAD: <link rel="stylesheet" href="./tufte.css" type="text/css">
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:15 num:15 toc:nil \n:nil @:t ::t |:t _:{} *:t ^:{} prop:nil
# #+OPTIONS: prop:t
# This makes MathJax not work
# #+OPTIONS: tex:imagemagick
# this makes MathJax work
#+OPTIONS: tex:t
# This also replaces MathJax with images, i.e., don‚Äôt use.
# #+OPTIONS: tex:dvipng
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [american]
# Setup tikz package for both LaTeX and HTML export:
#+LATEX_HEADER: \usepackqqqage{tikz}
#+LATEX_HEADER: \usepackage{commath}
#+LaTeX_HEADER: \usepackage{pgfplots}
#+LaTeX_HEADER: \usepackage{sansmath}
#+LaTeX_HEADER: \usepackage{mathtools}
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
#+PROPERTY: header-args:latex+ :packages '(("" "tikz"))
#
#+PROPERTY: header-args:latex+ :exports results :fit yes
#
#+STARTUP: showall
#+STARTUP: align
#+STARTUP: indent
# This makes MathJax/LaTeX appear in buffer (UTF-8)
#+STARTUP: entitiespretty
# #+STARTUP: logdrawer
# This makes pictures appear in buffer
# #+STARTUP: inlineimages
#+STARTUP: fnadjust

#+OPTIONS: html-style:nil
# #+BIBLIOGRAPHY: ref plain

[[bibliography:~/Dropbox/org/biblio/ref.bib][Bibliography]]

* Discrete Math according to Martin Aigner

** Bibliography :noexport:
:PROPERTIES:
:header-args: :dir "/home/galaxybeing/Dropbox/org/omnimath4"
:END:
:RESOURCES:
- [[bibliography:~/Dropbox/org/biblio/ref.bib][Bibliography]]
- [[cite:&aigner2006diskrete]]
:END:



** Not exported :noexport:

#+begin_src haskell :eval never :exports code :tangle omni4-1.hs :noweb yes
module OMNI4-1 where

<<90f02f5d-356e-40d6-9e91-6562af9bf4cf>>
<<c7b27de7-bd6e-49fb-bf65-8453e6242ab7>>
<<6e231094-1d98-4e5c-99f9-541f140e390a>>
<<35167592-7de1-424b-aac2-8918ffa2d3a0>>
<<2191f911-a28c-4081-9803-e6873933991c>>  
#+end_src



** Rabbit holes
@@html:<font color = "#375e79">@@
‚åúüêá *Rabbit holes* to get started with CIMMIC are:
1. [[http://learnyouahaskell.com/chapters][Learn You a Haskell for Great Good!]] (LYAHFGG) is a widely-used,
   often-suggested beginners site for starting out with Haskell. Work
   through at least chapters 1 and 2 to understand a lot of what we'll
   be doing with Haskell below[fn:1]. Pay particular attention to lists and
   /list comprehensions/. (/R_{C}-hole/)
2. Another big favorite for Haskell starters, but slightly more
   challenging is /[[https://www.haskell.org/tutorial/haskell-98-tutorial.pdf][A Gentle Introduction to Haskell 98]]/. AGITH was
   written by elite school professors (Yale) and uses more math
   terminology than LYAHFGG. Which is what we'll be doing, but usually
   with a shallower on-ramp. (/R_{O}-hole/)
3. The [[https://wiki.haskell.org/Special:AllPages][Haskell Wiki]] [fn:2] is full of knowledge gems, but don't expect
   to fully understand it yet. Maybe start with [[https://wiki.haskell.org/99_questions/1_to_10][this]] article and
   peruse through the rest of the "99 Questions." (/R_{O}-hole/)
4. We need to learn mathematical logic, since logic is simply baked
   into every programming language. Try [[https://math.libretexts.org/Courses/Monroe_Community_College/MATH_220_Discrete_Math/2%3A_Logic][this LibreTexts series]] on
   logic. Pay particular attention to the notation used on logic
   operators and the terminology as well. This stuff comes up all the
   time in programming. (/R_{C}-hole/)
5. These basic [[https://www.inf.ed.ac.uk/teaching/courses/inf1/fp/lectures/2017/set-theory.pdf][set theory slides]] with their tie-in to Haskell at the
   end are very good as well. Do something between a grok and a
   skim. We'll eventually be covering all the material therein.
   (/R_{O}-hole/)
6. Read through this [[https://en.wikipedia.org/wiki/Set_(mathematics)][Wikipedia Set]][fn:3] article, paying special
   attention to the Basic Operations section---maybe even rabbit-hole
   into the /[[https://en.wikipedia.org/wiki/Union_(set_theory)][union]]/ article to understand some basic algebraic
   operations on sets. You've probably seen this stuff before with
   /Venn diagrams;/ this is some of the algebra behind the
   diagrams. (/R_{O}-hole/)
7. Another big-league site for the serious-minded is the [[http://www.rosettacode.org/wiki/Rosetta_Code][Rosetta Code]]
   site. Here you can search on hundreds algorithms and numerical
   analysis articles, each task done in the code of dozens of
   programming languages[fn:4].  (/R_{FYI}-hole/)
@@html:</font>@@üêá‚åü

** Introduction

With this section we'll do a quick warm-up with some ideas in Haskell,
i.e., just a feel for the math and Haskell we'll be exploring. In the
next section we'll get started proper, and, yes, we'll be more
detail-oriented and explanation-rich. But do get started on the
rabbit-holing above.

** Peano arithmetic
:RESOURCES:
- [[http://cmsc-16100.cs.uchicago.edu/2015/Notes/arithmetic.php]]
- [[https://en.wikipedia.org/wiki/Peano_axioms][Peano axioms]]
:END:

*** Discussion

Some things in mathematics must be assumed as a starting point, as
/axiomatic/[fn:1]. One great example would be the /natural/ or
/counting/ numbers. These are the whole numbers starting typically
with $0$ and going, as we assume, out to infinity. The symbol commonly
used to denote the /set/[fn:2] of natural numbers is $\mathbb{N}$,
i.e.,

\begin{align*}
\mathbb{N} = \{\text{all the whole numbers starting with zero}\}
\end{align*}

By /whole numbers/ we mean whole and atomic[fn:3], as in not rational
(fractional), decimal-places real, or transcendental, or irrational
numbers. But what is meant by /all/ and, even worse, /starting with/?
For example, is there any sort of order implied, or are these whole
numbers just in whatever order as long as they're /after/ zero?
Obviously, this is not our intuitive understanding of the counting numbers.

Around the time of Kindergarten we learned a sort of nursery rhyme of
the first ten numbers---probably using our fingers as aides. Next, we
learned to write the numeric symbols from $1$ /to/ $10$. Next, we
stepped into our first real contact with mathematical abstraction when
we learned about numbers having two places or more: ten, eleven,
twelve, then the teens. This required an understanding of /positional
notation/[fn:5] using the ten basic Arabic numerals, $0$ to $9$, and
placing them in increasing powers-of-ten columns. But this was all
done at an intuitive level meant to cement in our minds the
fundamental idea that distinct /amounts/ have distinct designations,
i.e., names and numeric symbols.

But how could we indicate five things without the
numerical symbol $5$ or the word /five/? We might imitate a watch and
bark out /tick!/ five times[fn:6], hoping that someone, something is
in some way noting how many ticks there were.

*** Unary numeral system

There is the /[[https://en.wikipedia.org/wiki/Unary_numeral_system][unary numeral system]]/ (UNS) where numbers are
represented in a /unary/[fn:7] way, e.g., one is $1$, two is $11$,
three is $111$, et cetera. The UNS system is not really positional,
i.e., the column of a $1$ is immaterial since the $1$'s are completely
interchangeable---although when we want to go up a number, we do have
to move everything over one column. But again, the columns do not
indicate anything numerically as columns do with our decimal system[fn:8].

How would we add or subtract in our UNS system? Ironically, we could
invent a sort of columnar subtracting borrowing from decimal vertical
subtraction

\begin{array}{r}
&11111\\
-\!\!\!\!\!\!&11\\
\hline
&11100
\end{array}

then we just throw out the zeroes and count up the ones. But we can't
really do addition vertically. Perhaps not vertically but
horizontally?

\begin{align*}
11111 + 11 = 1111111
\end{align*}

We could also remove the $+$ and run together or /concatenate/ the
$1$'s. Now we'll do some Haskell code that might shed some
light. First, a real cheating way

#+name: 6dedb91a-5d72-4445-a5e4-d9463a517624
#+begin_src haskell :results verbatim :exports both
(length [1,1,1,1]) - (length [1,1])
#+end_src

#+RESULTS: 6dedb91a-5d72-4445-a5e4-d9463a517624
: 2

#+name: 90f02f5d-356e-40d6-9e91-6562af9bf4cf
#+begin_src haskell :eval never :exports code
uns1 list1 list2 = (length list1) - (length list2)
#+end_src

#+name: 09acab2a-00ee-4327-830a-1699f82b11cf
#+begin_src haskell :results verbatim :exports both
uns1 [1,1,1,1] [1,1]
#+end_src

#+RESULTS: 09acab2a-00ee-4327-830a-1699f82b11cf
: 2

As with all computer-numerical treatments of mathematics, we must
first decide which data structure to use. As is often the case with
Haskell, we will utilize lists to do our work. This may seem ironic in
some cases, since so much of math can be seen as, e.g., set
theory-based. Yes, Haskell has a library for sets, but beginners in
most programming languages start with lists and arrays as the go-to
data structure. Hence, we will manipulate our UNS with lists. This
means a set or string of ones will be represented as a list with
integer ones as its sole elements, e.g., ~[1,1,1,1,1]~ is $11111$.

*** Binary number system
:RESOURCES:
- [[cite:&chamberlandsingle]]
:END:

The unary system




Or we could say "the number after
four." But that's just the number after three---and so on until we
arrive at zero, which we call, yes, zero, and write as $0$. So in this
system, $5$ would be...

@@html:<p style="padding-left: 30px">@@
@@html:<font color = "#4715b3">@@
...the next, next, next, next, next number after zero.
@@html:</font>@@
@@html:</p>@@

But just to check this for accuracy, we again fall back on numerical
symbols and names. So we count the number of /next/'s and translate
this chain of next links back into $5$.

So we seem to be stuck with names and symbols, our /numbering system/,
so to speak, to even get off the ground with numbers as representative
of amounts. However, mathematics will want to take us much further
into the conceptualization of numbers, abstractions far beyond the
simple notion of how many. In abstract algebra, operations on numbers
such as addition and subtraction have consequences beyond number names
or symbols. So the subtraction of one natural number from another is a
"taking away" of one amount from another. But what if we try to take
$3$ from $2\;$? To take $3$ from $2$ would land us outside the
counting whole numbers $\mathbb{N}\;$, would it not?  After all, $2 -
3$ is $-1$, i.e., we went past $0$ and landed one tick below in
"negative territory." The /integers/ (denoted by $\mathbb{Z}$)
abstracts $\mathbb{N}\;$ by symmetrically mirroring, duplicating all
its positive whole numbers into their negative counterparts. However,
the operation of addition in $\mathbb{N}$ would not ever take us into
negatives. Any two (sic) natural numbers we might add together would
produce another member of the natural numbers somewhere further up the
list of $\mathbb{N}\;$. But now we're concerned with where in the
list. Hence, /order/ is our next abstraction beyond just naming
amounts. And as you might suspect, the most basic ordering of numbers
is to "line them up" according to their amounts[fn:9].

When we played with the notion of /next/ above, it was as if we
started by feeding a basic starting thing, a /zero/, into a /next
machine/, and out came "the next thing after zero". We might have
noted that to be $1$. Then if we feed our zero adorned with next into
the next machine again we get "the /next/, next thing after zero" And
we write that down somewhere as $2$. In effect, we're constructing a
way to string ticks together into a chain, forging a new chain link
for each new tick. Then instead of having a name or symbol, we could
just show the whole chain. Odd and awkward?  But this is exactly what
the Italian mathematician Giuseppe Peano (following up on work done by
the German mathematician Richard Dedekind) formulated in order to put
the notion of natural numbers on a more mathematically-sound footing.

*** Peano axioms

According to a modern treatment, there are five basic Peano axioms[fn:10]. The
first axiom states

1. @@html:<font color = "#4715b3">@@$0$ is a natural number, i.e., $0
   \in \mathbb{N}$ @@html:</font>@@

This is our starting point. Peano then gives four axioms to establish
/equality/

2. [@2] @@html:<font color = "#4715b3">@@ For every natural number
   $n$, $S(n)\;$ is a natural number. That is, the natural numbers
   are closed under $S\;$. Or $x \in \mathbb{N} \rightarrow Sx \in \mathbb{N}\;\;$.
   @@html:</font>@@

   
4. @@html:<font color = "#4715b3">@@For all natural numbers x and y, if x = y, then y = x. That is, equality is symmetric.@@html:</font>@@
5. 







* Sets

**  Bibliography :noexport:
:RESOURCES:
- [[bibliography:~/Dropbox/org/biblio/ref.bib][Bibliography]]
:END:

** Set beginnings
:RESOURCES:
- [[cite:&van2010computational]]
:END:

To check whether two sets are the same one has to check that they have
the same members. The fact that membership is all there is to set
identity, or that sets are fully determined by their members, is
called the /principle of extensionality/.

/Set comprehensions/ are math shorthand for declaring sets

ùñüùï≠: The set of all natural numbers multiplied by $2$

\begin{align*}
E = \{2n \; | \; n \in \mathbb{N}\}
\end{align*}

We could now have a variation such as

\begin{align*}
O = \{n \;|\; n \in \mathbb{N}, n \notin E\}
\end{align*}


If every member of a set $A$ is also a member of set $B$ we say that
$A$ is a subset of $B$, written as $A \subseteq B$. If $A \subseteq B$
and $B \subseteq A$ then it follows by the /principle of
extensionality/ that $A$ and $B$ are the same set. Conversely, if $A
= B\;$ then it follows that $A \subseteq B$ and $B \subseteq A$.

#+name:
#+begin_src haskell :results verbatim :exports both
let s1 = Set.fromList ["a", "b"]
#+end_src

#+begin_src haskell :results verbatim :exports both
s1
#+end_src

#+RESULTS:
: fromList ["a","b"]






What about a descriptive definition such as

\begin{align*}
\text{For allx } x \in P\text{, there existsy } y > x \text{ such that } y \in P.
\end{align*}



‚ûù
@@html:<font color = "#4715b3">@@
For all $x \in P$, there exists $y > x$ such that $y \in P$.
@@html:</font>@@ \\


#+name: cc1bf886-4810-4a4d-b58c-0b7628e3f1d4
#+begin_src haskell :results verbatim :exports both
[(x,y,z) | x <- [True,False], y <- [True,False], z <- [True,False]]
#+end_src

#+RESULTS: cc1bf886-4810-4a4d-b58c-0b7628e3f1d4
: [(True,True,True),(True,True,False),(True,False,True),(True,False,False),(False,True,True),(False,True,False),(False,False,True),(False,False,False)]

#+name: aa2673ce-0e6a-40ba-a592-a5a61163e541
#+begin_src haskell :results verbatim :exports both
[y > x | x <- [1..10], y <- [1..15]]
#+end_src


#+begin_src haskell :results verbatim :exports both
[if y > x then y else 0  | x <- [1..10], y <- [1..15]]
#+end_src

#+RESULTS:
: fromList ["a","b"]

#+name: 72339641-ea42-4280-b06d-ca7ef5efc949
#+begin_src haskell :results verbatim :exports both
[x | x <- [1..10], y <- [5..20], x < y ]
#+end_src

#+RESULTS: 72339641-ea42-4280-b06d-ca7ef5efc949
: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10]

#+name: 04ce1748-65c3-440e-bded-700607b4714e
#+begin_src haskell :results verbatim :exports both
filter even [1..10]
#+end_src

#+RESULTS: 04ce1748-65c3-440e-bded-700607b4714e
: [2,4,6,8,10]

#+name: 481f3bb9-4286-432f-aff7-cb2d6809e815
#+begin_src haskell :results verbatim :exports both
[x | x <- [1..10], (even x)]
#+end_src

#+RESULTS: 481f3bb9-4286-432f-aff7-cb2d6809e815
: [2,4,6,8,10]




#+NAME: expogrowth1
| 0 |   3 |
| 1 |   6 |
| 2 |  12 |
| 3 |  24 |
| 4 |  48 |
| 5 |  96 |
| 6 | 192 |
| 7 | 384 |
| 8 | 768 |
#+TBLFM: @2$2..@$2> = @-1$2*2

#+begin_src gnuplot :var data=expogrowth1 :results output :file ./images/expo3.svg
reset
set term svg font "Garamond,25"
set title "Exponential growth" font "CMU serif,15"
set style line 1 lc krgb '#0060ad' lt 1 lw 2 # --- blue
set yrange[0:800]
set xrange[0:10]
set terminal svg size 300,500
plot data with lines ls 1 notitle smooth csplines
#+end_src

#+RESULTS:
[[file:./images/expo3.svg]]

#+NAME: expogrowth0
| 1 | 2 | 3 |  4 |  5 |  6 |   7 |
| 2 | 4 | 8 | 16 | 32 | 64 | 128 |
#+TBLFM: @2$2..@2$> = @2$-1*2

#+NAME: expogrowth2
|   -2 |  -1 | 0 | 1 | 2 | 3 |  4 |  5 |  6 |   7 |
| 0.25 | 0.5 | 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 |
#+TBLFM: @2$1..@2$> = '(expt 2 (string-to-number @1))

If some process is increasing at an exponential rate, it
means that for each unit of change the rate is growing or decreasing
by a /common ratio/. In the example above, the common ratio is $2$.

#+PLOT: title:"example table" ind:1 type:2d with:lines
#+PLOT: labels:("first new label" "second column" "last column")
#+NAME:org-plot-example-1
| independent var | first dependent var | second dependent var |
|-----------------+---------------------+----------------------|
|             0.1 |               0.425 |                0.375 |
|             0.2 |              0.3125 |               0.3375 |
|             0.3 |          0.24999993 |           0.28333338 |
|             0.4 |               0.275 |              0.28125 |
|             0.5 |                0.26 |                 0.27 |
|             0.6 |          0.25833338 |           0.24999993 |
|             0.7 |          0.24642845 |           0.23928553 |
|             0.8 |             0.23125 |               0.2375 |
|             0.9 |          0.23333323 |            0.2333332 |
|               1 |              0.2225 |                 0.22 |
|             1.1 |          0.20909075 |           0.22272708 |
|             1.2 |          0.19999998 |           0.21458333 |
|             1.3 |          0.19615368 |           0.21730748 |
|             1.4 |          0.18571433 |           0.21071435 |
|             1.5 |          0.19000008 |            0.2150001 |
|             1.6 |           0.1828125 |            0.2046875 |
|             1.7 |          0.18088253 |            0.1985296 |
|             1.8 |          0.17916675 |           0.18888898 |
|             1.9 |          0.19342103 |           0.21315783 |
|               2 |                0.19 |              0.21625 |
|             2.1 |          0.18214268 |           0.20714265 |
|             2.2 |          0.17727275 |            0.2022727 |
|             2.3 |           0.1739131 |            0.1989131 |
|             2.4 |          0.16770833 |            0.1916667 |
|             2.5 |               0.164 |                0.188 |
|             2.6 |          0.15769238 |           0.18076923 |
|             2.7 |           0.1592591 |            0.1888887 |
|             2.8 |           0.1598214 |           0.18928565 |
|             2.9 |          0.15603453 |            0.1844828 |

#+PLOT:  type:grid title:"org mode"
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
| 0 | 1 | 0 | 0 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
| 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |


** Rational numbers

In Haskell rational numbers are handled by ~Data.Ratio~

#+begin_src haskell :results silent :exports code
import Data.Ratio
#+end_src

The basic "give back the simplest form" function is ~%~

#+begin_src haskell :results verbatim :exports both
50 % 10
#+end_src

#+RESULTS:
: 5 % 1

#+begin_src haskell :results verbatim :exports both
numerator (60 % 20)
#+end_src

#+RESULTS:
: 3

#+begin_src haskell :results silent :exports code
:{
-- combRatio :: Ratio
combRatio r = show (numerator (r)) ++ "/" ++ show (denominator (r))
:}
#+end_src

#+begin_src haskell :results verbatim :exports both
combRatio (60 % 20)
#+end_src

#+RESULTS:
: 3/1

‚á≤ Tip: Put an infix operator in parentheses to use as prefix

#+begin_src haskell :results silent :exports code
r1 = (%) 50 10
#+end_src

#+begin_src haskell :results verbatim :exports both
:t r1
#+end_src

#+RESULTS:
: r1 :: Integral a => Ratio a

#+begin_src haskell :results verbatim :exports both
60 % 20 :: (Integral a) => Ratio a
#+end_src

#+RESULTS:
: 3 % 1

#+begin_src haskell :results verbatim :exports both
60 % 20 :: Rational
#+end_src

#+RESULTS:
: 3 % 1

First, the data type

#+begin_src haskell :eval never :exports code
data  (Integral a) => Ratio a = !a :% !a  deriving (Eq)
#+end_src

The ~:%~ is a data constructor (the ~:~ insures it's a /constructor/
and not just an operator function) that is placed between the two
~Integral~ parameters. But in the source ~%~ calls ~reduce~[fn:11]

#+begin_src haskell :eval never :exports code
reduce ::  (Integral a) => a -> a -> Ratio a
{-# SPECIALISE reduce :: Integer -> Integer -> Rational #-}
reduce _ 0              =  ratioZeroDenominatorError
reduce x y              =  (x `quot` d) :% (y `quot` d)
                           where d = gcd x y
(%) :: (Integral a) => a -> a -> Ratio a
x % y =  reduce (x * signum y) (abs y)
#+end_src

#+begin_src haskell :results verbatim :exports both
quot 6 3 -- returns the quotient, discards the remainder, if any
#+end_src

#+RESULTS:
: 2

*** GCD and the Euclidean algorithm
:RESOURCES:
- [[https://en.wikipedia.org/wiki/Euclidean_algorithm][Wikipedia Euclidean algorithm]]
:END:

The built-in Haskell ~gcd~ was used to reduce the rational number,
e.g., fraction, to its lowest terms.

ùñüùï≠. Find the lowest terms of $42/56$

#+begin_src haskell :results verbatim :exports both
gcd 42 56
#+end_src

#+RESULTS:
: 14

i.e., $14$ is the greatest common divisor of both $42$ and $56$

# begin math
\[
\frac{42}{56}
\]
# end math


/Euclid's algorithm/, is an efficient method for computing the
greatest common divisor (GCD) of two integers (numbers), the largest
number that divides them both without a remainder.

#+begin_src haskell :results silent :exports code
:{
eGCD :: Integral i => i -> i -> i
eGCD 0 b = b
eGCD a b = eGCD (b `mod` a) a
:}
#+end_src

#+begin_src haskell :results verbatim :exports both
eGCD 60 25
#+end_src

#+RESULTS:
: 5


*** Perfect numbers

This code give the first four /perfect numbers/[fn:12]

#+begin_src haskell :results silent :exports code
:{
main = do
  let n = 4
  mapM_ print $
    take n [candidate | candidate <- [2 .. 2 ^ 19], getSum candidate == 1 ]
    where
      getSum candidate =
        1 % candidate + sum [1 % factor + 1 % (candidate `div` factor)
                            | factor <- [2 .. floor (sqrt (fromIntegral candidate))]
                            , candidate `mod` factor == 0 ]
:}
#+end_src

#+begin_src haskell :results verbatim :exports both
main
#+end_src

#+RESULTS:
: 6
: 28
: 496
: 8128

** Power series

Something[fn:13] else[fn:14]

* Footnotes

[fn:1] Truthfully, this will be your go-to reference/tutorial for the
immediate CIMMIC future. Get going with it and try to self-pace your
way through it all. It's not in-depth per se but will get you in the
Haskell ballpark, so to speak.

[fn:2] Grokking Haskell Wiki articles can be like trying to drink from a full-blast
fire hose, but good can be gained from them by the brave and virtuous.

[fn:3] Mathematics as experienced in Wikipedia's articles can also be
a firehose experience, but again good can be gleaned.

[fn:4] Check out [[http://www.rosettacode.org/wiki/Proof][this article]] and then its Haskell answer [[http://www.rosettacode.org/wiki/Proof#Haskell][here]]
... although this would be graduate-level Comp-Sci stuff. Notice,
perhaps, the list of 19 languages. These are the biggest of the big in
the realm of doing math with computers.

[fn:5] See [[https://en.wikipedia.org/wiki/Positional_notation][Positional notation]].

[fn:6] My mechanical pocket watch has a face with Roman numerals
evenly positioned around a circle, twelve main numbers for the hours
with five little marks between each number for the minutes and
seconds. But internally, the mechanics only know about ticking; they
know nothing of the numbers and their positions on the watch face. So
the steady ticking is /mapped/ to the watch face dumbly. Is ticking,
therefore, the most fundamental sort of counting?

[fn:7] Unfortunately, /unary/ here has two meanings. It means we're
only using one numeral to do our counting, /and/ it indicates a unary
function, i.e., a function that takes only one value and returns only
something from its domain---which is a very abstract version of the
idea of a /unary operator/ where only one thing is operated on. For
example, addition is a /binary operation/ since it takes /two/ numbers
and adds them. But making a number a negative number by placing the
negative sign in front of the number is an example of a unary
operation.

[fn:8] More on the /binary/ number system later.

[fn:9] How would you order a box of crayons? One way would be
by their colors. But is brown ahead or behind green? Crayon colors
don't seem to have an ahead or behind, maybe just a "beside" or "along
with" perhaps?

[fn:10] Peano actually had nine axioms; however, four of these deal
with the equality of his natural numbers, which we'll deal with later
when we explore /relations/, a more general concept above functions.

[fn:11] ~quot~ returns the quotient, discards the remainder; ~gcd~ is
the built-in /greatest common divisor/; ~signum~ gives back ~1~ if
argument is greater than zero, ~-1~ if less than zero, zero if zero.

[fn:12] In number theory, a /perfect number/ is a positive integer that
is equal to the sum of its positive divisors, excluding the number
itself. For instance, $6$ has divisors $1$, $2$ and $3$ (excluding
itself), and $1 + 2 + 3 = 6\;$, so $6$ is a perfect number.

[fn:13] This is the crummier, brute-force version \\
#+NAME: ratetable
| 0 min | 10 min | 20 min | 30 min | 40 min | 50 min |
|  20.0 |    10. |     5. |    2.5 |   1.25 |  0.625 |
#+TBLFM: @2$2=@2$1/2::@2$3=@2$2/2::@2$4=@2$3/2::@2$5=@2$4/2::@2$6=@2$5/2

[fn:14] Another attempt \\
| 0 min | 10 min | 20 min | 30 min | 40 min | 50 min |
|  20.0 |    10. |     5. |    2.5 |   1.25 |  0.625 |
#+TBLFM: @2$2=@2$1/2::@2$3=@2$2/2::@2$4=@2$3/2::@2$5=@2$4/2::@2$6=@2$5/2
